---
export interface Props {
	id?: string;
}

const { id } = Astro.props;
---

<div class="input-group" id="wordset-selector-list">
    <label class="input-group-text" for={id}>Wordset</label>
    <select class="form-select" id={id} disabled>
        <option id="placeholder-option">loading...</option>
    </select>
</div>

<style>
    .wordset-selector{
        width: 100%;
        max-width: 200px;
    }
</style>

<script>
    type WordSetResponse = {
        wordSets: WordSet[];
    };
    type WordSet = {
        id: string;
        name: string;
    };

    // Get wordsets from wordset evaluator
    await fetch(
        import.meta.env.PUBLIC_WORD_EVALUATOR_BASE_URL + "/api/WordSet/List?fields=Name&fields=Id",
        { method: "GET" }
    )
    // Parse the response into typescript type
    .then((response) => response.json())
    .then((json) => json as WordSetResponse)
    // Get all wordsets and set them in the selector list
    .then((response) => {
        const wordsetSelector = document.getElementById("wordset-selector-list")?.querySelector("select") as HTMLOptionElement | null;
        if (wordsetSelector && response.wordSets.length > 0) {
            for (const wordSet of response.wordSets) {
                wordsetSelector.removeChild
                const option = document.createElement("option");
                option.textContent = wordSet.name;
                option.value = wordSet.id;
                wordsetSelector?.appendChild(option);
            }
            wordsetSelector.disabled = false;
        }
    })
    // If wordsets could not be returned, append a dummy option to indicate it finished loading
    .catch((error) => {
        const wordsetSelector = document.getElementById("wordset-selector-list")?.querySelector("select") as HTMLOptionElement | null;
        if (wordsetSelector) {
            const option = document.createElement("option");
                option.textContent = "No wordsets found ðŸ˜¢";
                option.value = "unkown";
                wordsetSelector?.appendChild(option);
        }
    })
    // Remove placeholder option
    .finally(() => {
        const placeholder = document.getElementById("placeholder-option");
        placeholder.parentNode.removeChild(placeholder)
    });
</script>
